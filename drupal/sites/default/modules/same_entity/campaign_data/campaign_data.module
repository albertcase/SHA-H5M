<?php

/**
 * Implements hook_entity_info().
 */
function campaign_data_entity_info() {
  $return = array(
    'campaign_data' => array(
      'label' => t('Campaign Data'),
      'entity class' => 'CampaignData',
      'controller class' => 'CampaignDataController',
      'base table' => 'campaign_data',
      // 'revision table' => 'myentity_revision',
      'fieldable' => TRUE,
      'uuid' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'uuid' => 'uuid',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'campaign_data_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'campaign_data',
      'access callback' => 'campaign_data_access',
    ),
  );
  $return['campaign_data_type'] = array(
    'label' => t('Campaign Data Type'),
    'entity class' => 'CampaignDataType',
    'controller class' => 'CampaignDataTypeController',
    'base table' => 'campaign_data_type',
    'fieldable' => FALSE,
    'bundle of' => 'campaign_data',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'campaign_data',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/campaign/data-types',
      'file' => 'campaign_data.admin.inc',
      'controller class' => 'CampaignDataTypeUIController',
    ),
    'access callback' => 'campaign_data_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function campaign_data_entity_info_alter(&$entity_info) {
  foreach (campaign_data_types() as $type => $info) {
    $entity_info['campaign_data']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/campaign/data-types/manage/%campaign_data_type',
        'real path' => 'admin/structure/campaign/data-types/manage/' . $type,
        'bundle argument' => 5,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function campaign_data_menu() {
  $items = array();

  $items['admin/content/campaign/data/add'] = array(
    'title' => 'Campaign Data',
    'page callback' => 'campaign_data_admin_add_page',
    'access arguments' => array('administer campaign_data entities'),
    'file' => 'campaign_data.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'data',
    'tab_root' => 'data',
  );

  $entity_uri = 'admin/content/campaign/data/%campaign_data';
  $entity_uri_argument_position = 4;

  $items[$entity_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('campaign_data', $entity_uri_argument_position),
    'page callback' => 'campaign_data_view',
    'page arguments' => array($entity_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'campaign_data', $entity_uri_argument_position),
    'file' => 'campaign_data.pages.inc',
  );

  $items[$entity_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$entity_uri . '/delete'] = array(
    'title' => 'Delete data',
    'title callback' => 'campaign_data_label',
    'title arguments' => array($entity_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaign_data_delete_form', $entity_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'campaign_data', $entity_uri_argument_position),
    'file' => 'campaign_data.admin.inc',
  );

  $items[$entity_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaign_data_form', $entity_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'campaign_data', $entity_uri_argument_position),
    'file' => 'campaign_data.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (campaign_data_types() as $type => $info) {
    $items['admin/content/campaign/data/add/' . $type] = array(
      'title' => 'Add ' . $type,
      'page callback' => 'campaign_data_add',
      'page arguments' => array(5),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'campaign_data', $type),
      'file' => 'campaign_data.admin.inc',
    );
  }

  $items['admin/structure/campaign/data-types/%campaign_data_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaign_data_type_form_delete_confirm', 4),
    'access arguments' => array('administer campaign_data types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'campaign_data.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function campaign_data_permission() {
  $permissions = array(
    'administer campaign_data types' => array(
      'title' => t('Administer data types'),
      'description' => t('Allows users to configure data types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create campaign_data entities' => array(
      'title' => t('Create datas'),
      'description' => t('Allows users to create datas.'),
      'restrict access' => TRUE,
    ),
    'view campaign_data entities' => array(
      'title' => t('View mnessages'),
      'description' => t('Allows users to view datas.'),
      'restrict access' => TRUE,
    ),
    'edit any campaign_data entities' => array(
      'title' => t('Edit any datas'),
      'description' => t('Allows users to edit any datas.'),
      'restrict access' => TRUE,
    ),
    'edit own campaign_data entities' => array(
      'title' => t('Edit own datas'),
      'description' => t('Allows users to edit own datas.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function campaign_data_entity_property_info_alter(&$info) {
  $properties = &$info['campaign_data']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the data."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer campaign_data entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}


/*******************************************************************************
 ********************************* Entity API's **********************************
 ******************************************************************************/

/**
 * Access callback for entity.
 */
function campaign_data_access($op, $entity, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  if (user_access('administer campaign_data entities', $account)) {
    return TRUE;
  }
  if (isset($entity) && $entity_type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $entity_type", $account)) {
      return TRUE;
    }
  }
  return FALSE;
  // switch ($op) {
  //   case 'create':
  //     return user_access('administer campaign_data entities', $account)
  //         || user_access('create campaign_data entities', $account);
  //   case 'view':
  //     return user_access('administer campaign_data entities', $account)
  //         || user_access('view campaign_data entities', $account);
  //   case 'edit':
  //     return user_access('administer campaign_data entities')
  //         || user_access('edit any campaign_data entities')
  //         || (user_access('edit own campaign_data entities') && ($entity->uid == $account->uid));
  // }
}

/**
 * Load a Entity.
 */
function campaign_data_load($mid, $reset = FALSE) {
  $entitys = campaign_data_load_multiple(array($mid), array(), $reset);
  return reset($entitys);
}

/**
 * Load multiple entitys based on certain conditions.
 */
function campaign_data_load_multiple($mids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('campaign_data', $mids, $conditions, $reset);
}

/**
 * Save Entity.
 */
function campaign_data_save($entity) {
  if(campaign_data_type_load($entity->type))
    entity_save('campaign_data', $entity);
}

/**
 * Delete single entity.
 */
function campaign_data_delete($entity) {
  entity_delete('campaign_data', entity_id('campaign_data' ,$entity));
}

/**
 * Delete multiple entities.
 */
function campaign_data_delete_multiple($entity_ids) {
  entity_delete_multiple('campaign_data', $entity_ids);
}


/*******************************************************************************
 ****************************** Entity Type API's ********************************
 ******************************************************************************/

/**
 * Access callback for Entity Type.
 */
function campaign_data_type_access($op, $entity = NULL) {
  return user_access('administer campaign_data types');
}

/**
 * Load Entity Type.
 */
function campaign_data_type_load($entity_type) {
  return campaign_data_types($entity_type);
}

/**
 * List of Entity Types.
 */
function campaign_data_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('campaign_data_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save Entity type entity.
 */
function campaign_data_type_save($entity_type) {
  entity_save('campaign_data_type', $entity_type);
}

/**
 * Delete single case type.
 */
function campaign_data_type_delete($entity_type) {
  entity_delete('campaign_data_type', entity_id('campaign_data_type' ,$entity_type));
}

/**
 * Delete multiple case types.
 */
function campaign_data_type_delete_multiple($entity_type_ids) {
  entity_delete_multiple('campaign_data_type', $entity_type_ids);
}

/**
  * Implements hook_views_api().
  */
function campaign_data_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'campaign_data'),
  );
}
